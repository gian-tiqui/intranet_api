generator client {
  provider = "prisma-client-js"
}

// DEPT ID [1]HR [2]QM [3]IT [4]ADMIN [5]MARKETING [6]ACCOUNTING [7]PURCHASING
// POPULATE DEPARTMENTS TABLE UPON MIGRATION

// moving to postgresql

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  firstName      String  
  middleName     String?
  lastName       String
  lastNamePrefix String?
  preferredName  String?
  suffix         String?
  address        String?
  city           String?
  state          String?
  zipCode        Int?
  dob            DateTime @db.Date
  gender         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  refreshToken   String?  @unique
  deptId         Int
  employeeId     Int? @unique

  notifications  Notification[]
  posts          Post[]
  comments       Comment[]
  postReads      PostReader[] 
  department     Department   @relation(fields: [deptId], references: [deptId])
}

model Department {
  deptId         Int      @id @default(autoincrement())
  departmentName String   @unique
  departmentCode String
  posts          Post[]
  users          User[] 
  notifications  Notification[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Post {
  pid            Int      @id @default(autoincrement())
  userId         Int
  deptId         Int
  title          String?  @db.VarChar(255)
  message        String?  @db.VarChar(255)
  imageLocation  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  edited         Boolean  @default(false)
  public         Boolean  @default(true)

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department     Department @relation(fields: [deptId], references: [deptId])
  comments       Comment[]
  readers        PostReader[] 
}

model PostReader {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  readAt    DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [pid], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  cid            Int      @id @default(autoincrement())
  userId         Int
  postId         Int?
  parentId       Int?
  message        String   @db.VarChar(255)
  imageLocation  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post           Post?     @relation(fields: [postId], references: [pid], onDelete: Cascade)
  parentComment  Comment? @relation("CommentReplies", fields: [parentId], references: [cid])
  replies        Comment[] @relation("CommentReplies")

  @@index([parentId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  postId      Int?
  commentId   Int?
  deptId      Int?      
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id])
  department  Department?  @relation(fields: [deptId], references: [deptId])
}

model EditLogs {
  id           Int        @id @default(autoincrement())
  previousData String
  updatedBy    Int


  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}